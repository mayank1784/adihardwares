<%- include('partials/upperLayout',{ title: "ADI - Add Product" }); %>
    <link
      rel="stylesheet"
      href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />
  
  <style>
    input[type="file"] {
      display: none;
    }
    .form-group p {
      text-align: center;
      margin: 20px 0 30px 0;
    }
    #images {
      width: 90%;
      position: relative;
      margin: auto;
      display: flex;
      justify-content: space-evenly;
      gap: 20px;
      flex-wrap: wrap;
    }
    figure {
      width: 45%;
      position: relative;
      margin-bottom: 20px;
    }
    img {
      width: 100%;
    }
    figcaption {
      text-align: center;
      font-size: 2.4vmin;
      margin-top: 0.5vmin;
    }
    .imageLabel {
      display: block;
      position: relative;
      background-color: #de2025;
      color: #ffffff;
      font-size: 18px;
      text-align: center;
      width: 50%;
      padding: 18px 0;
      margin: auto;
      border-radius: 5px;
      cursor: pointer;
    }
    #submitB {
      display: block;
      position: relative;
      background-color: #de2025;
      color: #ffffff;
      font-size: 18px;
      text-align: center;
      width: 50%;
      padding: 18px 0;
      margin: auto;
      border-radius: 5px;
      cursor: pointer;
    }
    .delete-icon {
      position: absolute;
      top: 5px;
      right: 5px;
      background-color: red;
      color: white;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
    }
    .imageLabel:hover,
    #submitB:hover {
      background-color: #af2220;
    }
    @media (max-width: 768px) {
      figure {
        width: 100%;
      }
    }
    .dropdown-item {
    padding: 10px;
    cursor: pointer;
  }
  .dropdown-item.active {
    background-color: #de2025;
  }
  </style>
  <body>
    <div class="container mt-5">
      <div class="row justify-content-center">
        <div class="col-md-8">
          <h1 class="text-center">Add or Update Products</h1>
          <p class="text-center">Kindly check categories and subcategories in website for updating</p>
          <form
            id="imageForm"
            action="/api/v1/addProduct"
            method="post"
            enctype="multipart/form-data"
          >
            <div class="form-group">
              <label for="categoryName">Category Name:</label>
              <input
                type="text"
                class="form-control"
                id="categoryName"
                name="categoryName"
                required
              />
              <!-- Hidden dropdown for Category Name -->
              <div
                class="dropdown"
                id="categoryDropdown"
                style="display: none"
              >
              <% categoryData.forEach(category => { %>
                <div class="dropdown-item" onclick="selectOption('categoryName', '<%= category.name %>')">
                  <%= category.name %>
                </div>
              <% }); %>
            </div>
            </div>
            <div class="form-group">
              <label for="subcategoryName">Subcategory Name:</label>
              <input
                type="text"
                class="form-control"
                id="subcategoryName"
                name="subcategoryName"
              />
              <div
                class="dropdown"
                id="subcategoryDropdown"
                style="display: none"
              >
              <% subcategoryData.forEach(subcategory => { %>
                <div class="dropdown-item" onclick="selectOption('subcategoryName', '<%= subcategory.name %>')">
                  <%= subcategory.name %>
                </div>
              <% }); %>
            </div>
            </div>
            <div class="form-group">
              <label for="subsubcategoryName">Sub-subcategory Name:</label>
              <input
                type="text"
                class="form-control"
                id="subsubcategoryName"
                name="subsubcategoryName"
              />
              <div
                class="dropdown"
                id="subsubcategoryDropdown"
                style="display: none"
              >
              <% subsubcategoryData.forEach(subsubcategory => { %>
                <div class="dropdown-item" onclick="selectOption('subsubcategoryName', '<%= subsubcategory.name %>')">
                  <%= subsubcategory.name %>
                </div>
              <% }); %>
            </div>
            </div>
            <!-- <div class="form-group">
              <label for="caption">Caption:</label>
              <input
                type="text"
                class="form-control"
                id="caption"
                name="caption"
              />
            </div> -->
            <div class="form-group">
              <label for="inputimages" class="imageLabel">
                <i class="fas fa-upload"></i> &nbsp; Choose Images To Upload
              </label>
              <input
                type="file"
                id="inputimages"
                accept="image/*"
                onchange="preview()"
                multiple
                name="inputimages"
              />

              <p id="num-of-files">No Images Chosen</p>
              <div id="images"></div>
            </div>
            <div class="form-group text-center">
              <button type="submit" class="btn btn-primary" id="submitB">
                Submit
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
    <script>
      
  let selectedDropdownItemIndex = -1;

// Handle keyboard navigation for the dropdown
function handleDropdownKeyboardNavigation(event) {
    const dropdownItems = document.querySelectorAll(".dropdown-item");
    if (event.key === "ArrowUp" && selectedDropdownItemIndex > 0) {
      selectedDropdownItemIndex--;
    } else if (
      event.key === "ArrowDown" &&
      selectedDropdownItemIndex < dropdownItems.length - 1
    ) {
      selectedDropdownItemIndex++;
    } else if (event.key === "Enter" && selectedDropdownItemIndex >= 0) {
      // Populate the form field with the selected dropdown value on pressing Enter
      const selectedValue = dropdownItems[selectedDropdownItemIndex].textContent;
      const inputFieldId = dropdownItems[selectedDropdownItemIndex].dataset.inputField;
      const inputField = document.getElementById(inputFieldId);
      inputField.value = selectedValue;
      const dropdownId = inputFieldId + "Dropdown";
      const dropdown = document.getElementById(dropdownId);
      dropdown.style.display = "none";
    }

    // Apply active class to highlight the selected item
    dropdownItems.forEach((item, index) => {
      item.classList.toggle("active", index === selectedDropdownItemIndex);
    });
  }
      // Function to populate the dropdown with matching values based on user input
      function populateDropdown(inputField, dropdown, values) {
        dropdown.innerHTML = ""; // Clear previous dropdown items
        const inputValue = inputField.value.trim().toLowerCase();

        // Filter the matching values based on user input
        const matchingValues = values.filter((value) =>
          value.toLowerCase().startsWith(inputValue)
        );

        // Populate the dropdown with matching values
        matchingValues.forEach((value) => {
          const option = document.createElement("div");
          option.textContent = value;
          option.classList.add("dropdown-item");
          option.addEventListener("click", () => {
            inputField.value = value;
            dropdown.style.display = "none";
          });
          dropdown.appendChild(option);
        });

        // Show the dropdown if there are matching values, otherwise hide it
        dropdown.style.display = matchingValues.length > 0 ? "block" : "none";
      }
      const categoryNameInput = document.getElementById("categoryName");
      const subcategoryNameInput = document.getElementById("subcategoryName");
      const subsubcategoryNameInput =
        document.getElementById("subsubcategoryName");
      const captionInput = document.getElementById("caption");
      // Fetch the categoryData from EJS template and parse it to JavaScript array
  const categoryData = JSON.parse('<%- JSON.stringify(categoryData) %>');
  const subcategoryData = JSON.parse('<%- JSON.stringify(subcategoryData) %>');
  const subsubcategoryData = JSON.parse('<%- JSON.stringify(subsubcategoryData) %>');

  

  // Call the populateDropdown function whenever the user types in the input fields
  categoryNameInput.addEventListener("keyup", () => {
    populateDropdown(categoryNameInput, categoryDropdown, categoryData);
  });

  subcategoryNameInput.addEventListener("keyup", () => {
    populateDropdown(subcategoryNameInput, subcategoryDropdown, subcategoryData);
  });

  subsubcategoryNameInput.addEventListener("keyup", () => {
    populateDropdown(subsubcategoryNameInput, subsubcategoryDropdown, subsubcategoryData);
  });
  // Attach keyboard event listener to handle keyboard navigation
  categoryNameInput.addEventListener("keydown", (event) => {
    // Prevent form submission on Enter key press
    if (event.key === "Enter") {
      event.preventDefault();
    }
    handleDropdownKeyboardNavigation(event);
  });

  subcategoryNameInput.addEventListener("keydown", (event) => {
    // Prevent form submission on Enter key press
    if (event.key === "Enter") {
      event.preventDefault();
    }
    handleDropdownKeyboardNavigation(event);
  });

  subsubcategoryNameInput.addEventListener("keydown", (event) => {
    // Prevent form submission on Enter key press
    if (event.key === "Enter") {
      event.preventDefault();
    }
    handleDropdownKeyboardNavigation(event);
  });

      let selectedFiles = [];
      let fileInput = document.getElementById("inputimages");
      let imageContainer = document.getElementById("images");
      let numOfFiles = document.getElementById("num-of-files");

      function updateNumOfFilesText() {
        numOfFiles.textContent =
          selectedFiles.length > 0
            ? `${selectedFiles.length} File${
                selectedFiles.length > 1 ? "s" : ""
              } Selected`
            : "No Images Chosen";
      }

      function preview() {
        imageContainer.innerHTML = "";
        selectedFiles = [...fileInput.files]; // Store the selected files in the selectedFiles array

        for (let i = 0; i < selectedFiles.length; i++) {
          let reader = new FileReader();
          let figure = document.createElement("figure");
          let figCap = document.createElement("figcaption");
          figCap.innerText = selectedFiles[i].name;

          // Create delete icon and attach click event handler
          let deleteIcon = document.createElement("div");
          deleteIcon.innerHTML = '<i class="fas fa-trash-alt"></i>';
          deleteIcon.classList.add("delete-icon");
          deleteIcon.addEventListener("click", (event) => {
            event.preventDefault();
            event.stopPropagation();
            // Remove the thumbnail and the corresponding file from the selectedFiles array
            imageContainer.removeChild(figure);
            selectedFiles.splice(i, 1);
            updateNumOfFilesText(); // Update the "Files Selected" text after deletion
          });

          figure.appendChild(deleteIcon);
          figure.appendChild(figCap);
          reader.onload = () => {
            let img = document.createElement("img");
            img.setAttribute("src", reader.result);
            figure.insertBefore(img, figCap);
          };
          imageContainer.appendChild(figure);
          reader.readAsDataURL(selectedFiles[i]);
        }

        updateNumOfFilesText(); // Update the "Files Selected" text after selecting new images
      }

      

      // Function to enable/disable the input fields based on the hierarchy
      function toggleFormFields() {
        const categoryName = categoryNameInput.value.trim();
        const subcategoryName = subcategoryNameInput.value.trim();
        const subsubcategoryName = subsubcategoryNameInput.value.trim();
        const caption = captionInput.value.trim();

        // Disable subcategory and sub-subcategory fields if no category is provided
        if (categoryName === "") {
          subcategoryNameInput.disabled = true;
          subsubcategoryNameInput.disabled = true;
        } else {
          subcategoryNameInput.disabled = false;
          subsubcategoryNameInput.disabled = false;
        }

        // Disable sub-subcategory field if no subcategory is provided
        if (subcategoryName === "") {
          subsubcategoryNameInput.disabled = true;
        } else {
          subsubcategoryNameInput.disabled = false;
        }

        // If only Category and Images with or without caption is provided,
        // then subCategory and subsubcategory inputs will be disabled
        if (
          categoryName !== "" &&
          subcategoryName === "" &&
          selectedFiles.length > 0
        ) {
          subcategoryNameInput.disabled = true;
          subsubcategoryNameInput.disabled = true;
        }

        // If only Category, subcategory, and Images with or without caption is provided,
        // then subsubcategory inputs will be disabled
        if (
          categoryName !== "" &&
          subcategoryName !== "" &&
          subsubcategoryName === "" &&
          selectedFiles.length > 0
        ) {
          subsubcategoryNameInput.disabled = true;
        }
      }

      // Call the toggleFormFields function initially and whenever the input values change
      toggleFormFields();
      categoryNameInput.addEventListener("input", toggleFormFields);
      subcategoryNameInput.addEventListener("input", toggleFormFields);
      selectedFiles.addEventListener("change", toggleFormFields);
    </script>
  </body>
</html>
